fprintf(outAsm, "   CP R20, R21          ; compara expoente1 com expoente2\n"
    "    BRGE exp1_ge_exp2   ; se expoente1 >= expoente2, salta\n\n");

    // --- caso expoente2 > expoente1 ---
    fprintf(outAsm, "; Caso expoente2 > expoente1: alinhando mantissa1\n\n");

    fprintf(outAsm, "   SUB R21, R20        ; R21 = diff (expoente2 - expoente1)\n"
    "    MOV R22, R18        ; R22 = mantissa1 LSB\n"
    "    MOV R23, R19        ; R23 = mantissa1 MSB\n"
    "    ANDI R23, 0x03      ; isolando bits 9-8 da mantissa1\n\n");

    fprintf(outAsm, "ALIGN_LOOP1:\n"
    "    LSR R23\n"
    "    ROR R22\n"
    "    DEC R21\n"
    "    BRNE ALIGN_LOOP1\n\n");

    fprintf(outAsm, "   MOV R18, R22        ; retorna mantissa1 alinhada\n"
    "    ANDI R19, 0b11111100 ; limpa bits 1-0 da mantissa em R19\n"
    "    OR R19, R23         ; atualiza mantissa1 MSB com bits deslocados\n\n");

    fprintf(outAsm, "   MOV R20, R17        ; copia expoente maior para R20\n");
    fprintf(outAsm, "   RJMP end_align\n\n");

    fprintf(outAsm, "exp1_ge_exp2:\n");
    fprintf(outAsm, "   ; Caso expoente1 >= expoente2: alinhando mantissa2\n\n");

    fprintf(outAsm, "   SUB R20, R21        ; R20 = diff (expoente1 - expoente2)\n"
    "    MOV R22, R16        ; R22 = mantissa2 LSB\n"
    "    MOV R23, R17        ; R23 = mantissa2 MSB\n"
    "    ANDI R23, 0x03      ; isolando bits 9-8 da mantissa2\n\n");

    fprintf(outAsm, "ALIGN_LOOP2:\n"
    "    LSR R23\n"
    "    ROR R22\n"
    "    DEC R20\n"
    "    BRNE ALIGN_LOOP2\n\n");

    fprintf(outAsm, "    MOV R16, R22        ; retorna mantissa2 alinhada\n"
    "    ANDI R17, 0b11111100 ; limpa bits 1-0 da mantissa em R17\n"
    "    OR R17, R23         ; atualiza mantissa2 MSB com bits deslocados\n\n");

    fprintf(outAsm, "   MOV R20, R19        ; copia expoente maior para R20\n");
    fprintf(outAsm, "end_align:\n\n");

    --------------------------------------------------------

    fprintf(outAsm, "; Comparar MSB primeiro\n"
        "    CP R19, R17\n"
        "    BRSH A_maior ; se A >= B\n"
        "    RJMP B_maior ; caso contrário A < B\n");

        fprintf(outAsm, "; Se iguais, compara LSB\n"
        "    CP R18, R16\n"
        "    BRSH A_maior\n"
        "    RJMP B_maior\n");

        fprintf(outAsm, "A_maior:\n"
        "    ; R19:R18 - R17:R16\n"
        "    MOV R22, R18\n"
        "    MOV R23, R19\n"
        "    SUB R22, R16\n"
        "    SBC R23, R17\n\n");

        fprintf(outAsm, "; Resultado em R23:R22\n"
        "    ; Sinal do resultado = sinal_A (bit 7 de R19)\n"
        "    ; Vamos montar o novo registrador com expoente em R24, sinal ajustado\n"
        "    MOV R24, R19       ; pega expoente e sinal\n"
        "    ; Mantemos o sinal de A, então não precisa mudar\n\n");

        fprintf(outAsm, "   RJMP fim_sub\n\n");

        fprintf(outAsm, "B_maior:\n"
        "    ; R17:R16 - R19:R18\n"
        "    MOV R22, R16\n"
        "    MOV R23, R17\n"
        "    SUB R22, R18\n"
        "    SBC R23, R19\n\n");

        fprintf(outAsm, "; Resultado em R23:R22\n"
        "    ; Sinal do resultado = sinal_B (bit 7 de R17)\n"
        "    MOV R24, R17       ; pega expoente e sinal\n"
        "    ; Mantemos o sinal de B\n\n");

        fprintf(outAsm, "   RJMP fim_sub\n\n");

        fprintf(outAsm, "sinais_iguais:\n"
        "    ; soma direta de mantissas\n"
        "    MOV R22, R18\n"
        "    MOV R23, R19\n"
        "    ADD R22, R16\n"
        "    ADC R23, R17\n\n");

        fprintf(outAsm, "; sinal do resultado = mesmo sinal dos dois (pega de qualquer um)\n"
        "    MOV R24, R19\n\n");

        fprintf(outAsm, "fim_sub:\n"
        "    MOV R25, R24        ; começa com sinal + expoente\n"
        "    ANDI R25, 0xFC      ; limpa bits 1–0 (para inserir bits 9–8 da mantissa)\n"
        "    ANDI R23, 0x03      ; mantém apenas bits 9–8 da mantissa\n"
        "    OR R25, R23         ; insere bits da mantissa no final do byte MSB\n"
        "    MOV R24, R22\n");

        --------------------------------------------------------

        fprintf(outAsm,"send_result:\n"
            "   ; Envia resultado final compactado (R25:R24)\n"
            "   MOV R16, R25      ; byte alto\n"
            "   RCALL send_byte_hex\n"
            "   LDI R16, 0x20     ; espaço\n"
            "   RCALL send_byte\n\n"

            "   MOV R16, R24      ; byte baixo\n"
            "   RCALL send_byte_hex\n"
            "   LDI R16, 0x0A     ; \n"
            "   RCALL send_byte\n\n"

            "   RJMP end\n");

            fprintf(outAsm, "; === Função: envia o byte em R16 via serial ===\n"
                            "send_byte:\n"
                            "    ; Espera UDR vazio\n"
                            "    wait_udr:\n"
                            "    LDS R17, UCSR0A\n"
                            "    SBRS R17, UDRE0\n"
                            "    RJMP wait_udr\n\n"

                            "    ; Envia byte\n"
                            "    STS UDR0, R16\n"
                            "    RET\n\n");

            fprintf(outAsm, "; === Função: envia R16 como 2 dígitos HEX (ASCII) ===\n"
                            "send_byte_hex:\n"
                            "   PUSH R16      ; salva o valor original\n"
                            "   PUSH R17\n"
                            "   PUSH R18\n"
                            "   PUSH R19\n"
                            "\n"
                            "   MOV R17, R16  ; cópia original\n"
                            "   SWAP R17\n"
                            "   ANDI R17, 0x0F\n"
                            "   CPI R17, 10\n"
                            "   BRLT hex_digit1\n"
                            "   LDI R19, 'A'\n"
                            "   SUBI R19, 10\n"
                            "   ADD R17, R19\n"
                            "   RJMP send1\n"
                            "hex_digit1:\n"
                            "   LDI R19, '0'\n"
                            "   ADD R17, R19\n"
                            "send1:\n"
                            "   MOV R16, R17\n"
                            "   RCALL send_byte\n"
                            "\n"
                            "   POP R16       ; restaura original para nibble baixo\n"
                            "   PUSH R16      ; salva de novo para segunda parte\n"
                            "   ANDI R16, 0x0F\n"
                            "   CPI R16, 10\n"
                            "   BRLT hex_digit2\n"
                            "   LDI R19, 'A'\n"
                            "   SUBI R19, 10\n"
                            "   ADD R16, R19\n"
                            "   RJMP send2\n"
                            "hex_digit2:\n"
                            "   LDI R19, '0'\n"
                            "   ADD R16, R19\n"
                            "send2:\n"
                            "   RCALL send_byte\n"
                            "\n"
                            "   POP R16\n"
                            "   POP R18\n"
                            "   POP R17\n"
                            "   POP R19\n"
                            "   RET\n\n"
                            "end:\n"
                            "    RJMP end\n\n");